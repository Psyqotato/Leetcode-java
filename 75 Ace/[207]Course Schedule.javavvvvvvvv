import java.util.ArrayList;
import java.util.LinkedList;

//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    boolean[] visited;
    boolean[] paths;
    boolean hasCycle = false;
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        visited = new boolean[numCourses];
        paths = new boolean[numCourses];
        List<Integer>[] graph = new ArrayList[numCourses];
        for (int i = 0; i < numCourses; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int[] pre : prerequisites) {
            graph[pre[1]].add(pre[0]);
        }
        for (int i = 0; i < numCourses; i++) {
            trackCourse(graph, i);
        }
        return !hasCycle;
    }
    void trackCourse(List<Integer>[] graph, int curCourse) {
        if (paths[curCourse]) {
            hasCycle = true;
            return;
        }
        if (visited[curCourse] || hasCycle) return;
        visited[curCourse] = true;
        paths[curCourse] = true;
        for (int nextCourse : graph[curCourse]) {
            trackCourse(graph, nextCourse);
        }
        paths[curCourse] = false;
    }
}